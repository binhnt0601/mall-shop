# Build BASE - Dependencies stage
FROM node:20-alpine AS base

WORKDIR /app

# Copy only package files for efficient caching
COPY package.json yarn.lock ./


# Install necessary tools and dependencies
RUN apk add --no-cache git \
  && yarn --frozen-lockfile \
  && yarn cache clean

# Build Image - Build stage
FROM node:20-alpine AS build

WORKDIR /app

# Copy dependencies from base image
COPY --from=base /app/node_modules ./node_modules
COPY . .

# Copy .env.production to .env for production environment
# RUN rm -f .env.staging .env.local && cp .env.production .env

# Install node-prune and other necessary tools
RUN apk add --no-cache git curl \
  && yarn build \
  && curl -sfL https://gobinaries.com/tj/node-prune | sh \
  && yarn cache clean \
  && rm -rf /tmp/*

# Production Image
FROM node:20-alpine AS production

WORKDIR /app

# Copy necessary files for production
COPY --from=build /app/public ./public
# COPY --from=build /app/.env.production ./.env

# Set mode "standalone" in file "next.config.js"
# COPY --from=build /app/.next/standalone ./
# COPY --from=build /app/.next/static ./.next/static

# Create a non-root user
RUN addgroup --system --gid 1001 nodejs && \
  adduser --system --uid 1001 nextjs && \
  chown -R nextjs:nodejs /app

USER nextjs

# Expose the port
EXPOSE 3000

# Command to run the application in production mode
CMD ["node", "server.js"]
